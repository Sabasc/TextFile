//City Get All Api 
[HttpGet]
        [Route("api/City/GetByOrganizationCompanyId")]
        public IHttpActionResult GetByOrganizationCompanyId(int OrganizationId, int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.City obj = new Model.City();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.City.GetAll(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
// Account Combo Fill  Api
 [HttpGet]
        [Route("api/COAAllocation/AccountsComboFill")]
        public IHttpActionResult AccountsComboFill(int OrganizationId,int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.Accounts.COAAllocation obj = new Model.Accounts.COAAllocation();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Accounts.COAAllocation.GetForComboBind(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
            
        }
// Read All Parent Group Accounts (i.e 1st , 2nd or 3rd)
[HttpGet]
        [Route("api/ChartofAccount/ReadAllParentGroupAccount")]
        public IHttpActionResult ReadAllParentGroupAccount(int OrganizationId, int CompanyId, int FinancialYearId,
            int LanguageId, int Account_Level = 0, int AccountTypeId = 0, int AccountClassId = 0
            )
        {
            object lstReturn = null;
            try
            {
                Model.ReportsParameters obj = new Model.ReportsParameters();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                obj.FinancialYearId = FinancialYearId;
                obj.LanguageId = LanguageId;
                obj.Account_Level = Account_Level;
                obj.AccountTypeId = AccountTypeId;
                obj.AccouuntClassId = AccountClassId;
                DataTable dt = Architecture.BLL.Accounts.ChartofAccount.ReadAllAccountgroup(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
            
        }

// Custom Group Api
[HttpGet]
        [Route("api/AcLookUpsController/GetAll")]
        public IHttpActionResult GetAll(int OrganizationId, int CompanyId)
        {

            object lstReturn = null;
            try
            {
                Architecture.Model.ReportsParameters obj = new Model.ReportsParameters();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Accounts.AcLookUps.GetAll(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
// Inventory Group ( Customer Group From Inventory Evaluation)
[HttpGet]
        [Route("api/CustomerGroup/CustomerGroupFromInventoryStockEvaluation")]
        public IHttpActionResult CustomerGroupFromInventoryStockEvaluation(int OrganizationId , int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.Inventory.CustomerGroup obj = new Model.Inventory.CustomerGroup();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Inventory.CustomerGroup.GetSupplierCustomerGroupFromInventoryStockEvaluation(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
// TradeDebtorsAndCreditors_Report Api 

[HttpPost]
        [Route("api/AccountsReports/TradeDebtorsAndCreditors_Report")]
        public IHttpActionResult TradeDebtorsAndCreditors_Report(Architecture.Model.ReportsParameters obj)
        {
            object lstReturn = null;
            try
            {
                DataTable dt = Architecture.BLL.Reports.Accounts.VoucherReports.TradeDebtorsAndCreditors_Report(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
// Method With Params
 public static DataTable TradeDebtorsAndCreditors_Report(Architecture.Model.ReportsParameters obj)
        {
            DataTable dt = null;
            try
            {
                List<SqlParameter> p = new List<SqlParameter>();
                p.Add(new SqlParameter { ParameterName = "@OrganizationId", Value = obj.OrganizationId });
                p.Add(new SqlParameter { ParameterName = "@CompanyId", Value = obj.CompanyId });
                p.Add(new SqlParameter { ParameterName = "@CompanyIdCoa", Value = obj.CwCoaId });
                p.Add(new SqlParameter { ParameterName = "@AccouuntClassId", Value = obj.AccouuntClassId });
                if (!Architecture.Common.Conversion.CheckDateTimeNull(obj.FromDate))
                {
                    p.Add(new SqlParameter { ParameterName = "@FromDate", Value = obj.FromDate });
                }
                if (!Architecture.Common.Conversion.CheckDateTimeNull(obj.ToDate))
                {
                    p.Add(new SqlParameter { ParameterName = "@ToDate", Value = obj.ToDate });
                }
                if (obj.FromDocNo != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@BalanceFrom", Value = obj.FromDocNo });
                }
                if (obj.ToDocNo != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@BalanceTo", Value = obj.ToDocNo });
                }
                if (obj.CityId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@CityId", Value = obj.CityId });
                }
                if (obj.Status != string.Empty)
                {
                    p.Add(new SqlParameter { ParameterName = "@ParentAccountCode", Value = obj.Status });
                }
                if (obj.LanguageId != 0)
                {
                    p.Add(new SqlParameter("@LanguageId", obj.LanguageId));
                }
                if (obj.CustomGroupId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@CustomGroupId", Value = obj.CustomGroupId });
                }
                if (obj.AccountTypeIds != null && obj.AccountTypeIds != string.Empty)
                {
                    p.Add(new SqlParameter { ParameterName = "@CustomerGroupIds", Value = obj.AccountTypeIds });
                }
                if (obj.ActionId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@ActionId", Value = obj.ActionId });
                }
                if (obj.ApprovedFilter != "All")
                {
                    p.Add(new SqlParameter { ParameterName = "@IsApproved", Value = obj.IsApproved });
                }
                if (obj.ReportTypeId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@TradeTypeId", Value = obj.ReportTypeId });//2 for Sale //1 for purchase
                }
                dt = GenericProvider.GetDataTableProc<Architecture.Model.Accounts.VoucherHead>("SpAccounts_TradeDebtorsAndCreditors_Report", p);
                return dt;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
