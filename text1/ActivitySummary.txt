
//API For Combo Document Types From Vouchers
[HttpGet]
[Route("api/Voucher/GetDocumentTypesFromVouchers")]
public IHttpActionResult GetByOrganizationCompanyId(int OrganizationId, int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.Accounts.VoucherHead obj = new Model.Accounts.VoucherHead();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Accounts.VoucherHead.GetDocumentTypesFromVouchers(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
//Activity Summary Report
        [HttpPost]
        [Route("api/AccountsReports/ReadByActivitySummary")]
        public IHttpActionResult ReadByActivitySummary(Architecture.Model.ReportsParameters obj)
        {
            object lstReturn = null;
            try
            {
                DataTable dt = Architecture.BLL.Reports.Accounts.VoucherReports.ActivitySummaryReport(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }


//API For Crystal Report 110
[HttpPost]
        [Route("api/AccountsHistoryReports/AcRptActivitySummery_110")]
        public IHttpActionResult AcRptActivitySummery_110(Architecture.Model.ReportsParameters obj)
        {
            object lstReturn = null;
            try
            {
                string dt = Architecture.WebHelper.Reports.AccountsHistoryReports.AcRptActivitySummery_110(obj);
                if (dt != string.Empty)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
//API For Crystal Report 116
 [HttpPost]
        [Route("api/AccountsHistoryReports/AcRptAccountsActivityDetail_116")]
        public IHttpActionResult AcRptAccountsActivityDetail_116(Architecture.Model.ReportsParameters obj)
        {
            object lstReturn = null;
            try
            {
                string dt = Architecture.WebHelper.Reports.AccountsHistoryReports.AcRptAccountsActivityDetail_116(obj);
                if (dt != string.Empty)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }

// Method 
#region ActivitySummary
        public static DataTable ActivitySummaryReport(Architecture.Model.ReportsParameters obj)
        {
            DataTable dt = null;
            try
            {
                List<SqlParameter> p = new List<SqlParameter>();
                p.Add(new SqlParameter("@FinancialYearId", obj.FinancialYearId));
                p.Add(new SqlParameter("@OrganizationId", obj.OrganizationId));
                p.Add(new SqlParameter("@CompanyId", obj.CompanyId));
                if (!Architecture.Common.Conversion.CheckDateTimeNull(obj.FromDate))
                {
                    p.Add(new SqlParameter("@VoucherDateF", obj.FromDate));
                }
                if (!Architecture.Common.Conversion.CheckDateTimeNull(obj.ToDate))
                {
                    p.Add(new SqlParameter("@VoucherDateT", obj.ToDate));
                }
                if (obj.ProjectsId != 0)
                {
                    p.Add(new SqlParameter("@ProjectsId", obj.ProjectsId));
                }
                if (obj.BranchesId != 0)
                {
                    p.Add(new SqlParameter("@BranchesId", obj.BranchesId));
                }
                if (obj.AccountTypeIds != null && obj.AccountTypeIds != string.Empty)
                {
                    p.Add(new SqlParameter("@AccountTypeIds", obj.AccountTypeIds));
                }
                if (obj.Ids != null && obj.Ids != string.Empty)
                {
                    p.Add(new SqlParameter("@DocumentTypeIds", obj.Ids));
                }
                if (obj.ApprovedFilter != "All")
                {
                    p.Add(new SqlParameter("@IsApproved", obj.IsApproved));
                }
                dt = GenericProvider.GetDataTableProc<Architecture.Model.ReportsParameters>("Sp_ActivityReportSummery_Rpt", p);
                return dt;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        #endregion