// Custom Group Api 
[HttpGet]
        [Route("api/AcLookUpsController/GetAll")]
        public IHttpActionResult GetAll(int OrganizationId, int CompanyId)
        {

            object lstReturn = null;
            try
            {
                Architecture.Model.ReportsParameters obj = new Model.ReportsParameters();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Accounts.AcLookUps.GetAll(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }

// Customer Group Or Inventory Group  Api
[HttpGet]
        [Route("api/CustomerGroup/CustomerGroupFromInventoryStockEvaluation")]
        public IHttpActionResult CustomerGroupFromInventoryStockEvaluation(int OrganizationId , int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.Inventory.CustomerGroup obj = new Model.Inventory.CustomerGroup();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Inventory.CustomerGroup.GetSupplierCustomerGroupFromInventoryStockEvaluation(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }

// Parent Categories (Trade Type)

[HttpGet]
        [Route("api/ItemCategory/InventoryParentCategories")]
        public IHttpActionResult InventoryParentCategories()
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.ReportsParameters obj = new Model.ReportsParameters();
                DataTable dt = Architecture.BLL.Inventory.Item.InventoryParentCategories(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }

//  Branches Get All Api
[HttpGet]
        [Route("api/Branches/GetAll")]
        public IHttpActionResult GetAll(int OrganizationId , int CompanyId)
        {
            object lstReturn = null;
            try
            {
                Architecture.Model.Branches obj = new Model.Branches();
                obj.OrganizationId = OrganizationId;
                obj.CompanyId = CompanyId;
                DataTable dt = Architecture.BLL.Branches.GetAll(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }
// Inventory Payable And Receivable
        [HttpPost]
        [Route("api/AccountsReports/InventoryPayablesandReceivables")]
        public IHttpActionResult InventoryPayablesandReceivables(Architecture.Model.ReportsParameters obj)
        {
            object lstReturn = null;
            try
            {
                DataTable dt = Architecture.BLL.Reports.Accounts.GeneralReprots.InventoryPayablesandReceivables(obj);
                if (dt.Rows.Count > 0)
                {
                    lstReturn = dt;
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = false, Message = ex.Message, Data = "" });
            }
            return Json(new { Status = true, Message = "", Data = new { Result = lstReturn } });
        }

// Method
#region InventoryPayables&Receivables
        public static DataTable InventoryPayablesandReceivables(Architecture.Model.ReportsParameters obj)
        {
            DataTable dt = null;
            try
            {
                List<SqlParameter> p = new List<SqlParameter>();
                p.Add(new SqlParameter { ParameterName = "@OrganizationId", Value = obj.OrganizationId });
                p.Add(new SqlParameter { ParameterName = "@CompanyId", Value = obj.CompanyId });
                p.Add(new SqlParameter { ParameterName = "@FinancialYearId", Value = obj.FinancialYearId });

                if (!Conversion.CheckDateTimeNull(obj.FromDate))
                {
                    p.Add(new SqlParameter { ParameterName = "@FromDate", Value = obj.FromDate });
                }
                if (!Conversion.CheckDateTimeNull(obj.ToDate))
                {
                    p.Add(new SqlParameter { ParameterName = "@ToDate", Value = obj.ToDate });
                }
                if (obj.AccountTypeIds != null && obj.AccountTypeIds != string.Empty)
                {
                    p.Add(new SqlParameter { ParameterName = "@CustomerGroupIds", Value = obj.AccountTypeIds });
                }
                if (obj.Ids != null && obj.Ids != string.Empty)
                {
                    p.Add(new SqlParameter { ParameterName = "@InventoryParentCategories", Value = obj.Ids });
                }
                if (obj.ReportTypeId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@ReportType", Value = obj.ReportTypeId });
                }
                if (obj.Debit != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@ClDebit", Value = obj.Debit });
                }
                if (obj.Credit != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@ClCredit", Value = obj.Credit });
                }
                p.Add(new SqlParameter { ParameterName = "@TranTypes", Value = obj.TranTypes });
                if(obj.ApprovedFilter != "All")
                {
                    p.Add(new SqlParameter { ParameterName = "@IsApproved", Value = obj.IsApproved });
                }
                if(obj.CustomerGroupId != 0)
                {
                    p.Add(new SqlParameter { ParameterName = "@CustomeGroupId", Value = obj.CustomerGroupId });
                }
                dt = GenericProvider.GetDataTableProc<Architecture.Model.Accounts.PdcInventory>("SpAccounts_InventoryPayablesandReceivables_Rpt", p);
                return dt;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        #endregion
                string ParentsIds = "";
                string GroupIds = "";
                if (CmbTradeType.Text != null && CmbTradeType.Text != string.Empty)
                {
                    string authors = Conversion.ToString(CmbTradeType.Text.Trim()) + ",";
                    string[] authorsList = authors.Split(',');
                    foreach (string author in authorsList)
                    {
                        DataRow[] dr = dtParentCat.Select("InvParentCateDescription='" + Conversion.ToString(author) + "'");
                        if (dr.Length > 0)
                        {
                            ParentsIds += Conversion.ToString(dr[0].ItemArray[0]) + ",";
                        }
                    }
                }
                if (cmbCustomerGroup.Text != null && cmbCustomerGroup.Text != string.Empty)
                {
                    string authors = Conversion.ToString(cmbCustomerGroup.Text.Trim()) + ",";
                    string[] authorsList = authors.Split(',');
                    foreach (string author in authorsList)
                    {
                        DataRow[] dr = dtGroups.Select("Description='" + Conversion.ToString(author) + "'");
                        if (dr.Length > 0)
                        {
                            GroupIds += Conversion.ToString(dr[0].ItemArray[0]) + ",";
                        }
                    }
                }
                Architecture.Model.ReportsParameters obj = new Model.ReportsParameters();
                obj.OrganizationId = UserAccount.OrganizationId;
                obj.CompanyId = UserAccount.CompanyId;
                obj.FinancialYearId = clsGlobalVariables.ActiveYr.Id;
                obj.AccountTypeIds = Conversion.ToString(GroupIds);
                obj.Ids = Conversion.ToString(ParentsIds);
                obj.Debit = Conversion.ToDouble(txtClosingDebit.Text);
                obj.Credit = Conversion.ToDouble(txtClosingCredit.Text);
                obj.FromDate = datFromDate.Value;
                obj.ToDate = datToDate.Value;
                if (rdPurchase.Checked)
                {
                    obj.TranTypes = 1;
                }
                if (rdSale.Checked)
                {
                    obj.TranTypes = 2;
                }
                if (rdPurchaseandSale.Checked)
                {
                    obj.TranTypes = 3;
                }
                if (ChkReceivables.Checked)
                {
                    obj.ReportTypeId = 1;
                }
                if (ChkPayables.Checked)
                {
                    obj.ReportTypeId = 2;
                }
                if (ChkReceivables.Checked && ChkPayables.Checked)
                {
                    obj.ReportTypeId = 3;
                }
                if (ChkPostedTransaction.Checked)
                {
                    obj.IsApproved = true;
                }
                else
                {
                    obj.ApprovedFilter = "All";
                }

                obj.CustomerGroupId = Conversion.ToInt(CmbCustomGroup.Value);